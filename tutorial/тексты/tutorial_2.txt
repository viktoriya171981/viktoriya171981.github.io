Структура HTML документа. Создание первой страницы.
Мы узнаем, что такое:
DOCTYPE и три главных тега HTML страницы
Тег title, теги для заголовков, параграфов, списков и специальные символы

DOCTYPE и три главных тега HTML страницы
Страница HTML состоит минимум из трех тегов: html, head и body.
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
  </head>
  <body>
  </body>
</html>
<!DOCTYPE html>  декларация типа документа или «доктайпа». 
Этой строчкой мы начинаем каждый HTML5 документ, чтобы браузер мог определить версию HTML и правильно отобразить страницу.
Тег <html> — это контейнер, в котором находится всё содержимое страницы, включая теги <head> и <body>. 
Как правило, тег <html> идёт в документе вторым после доктайпа. 
Как мы видим, теги могут вкладываться один в другой (в элементе html находятся два элемента: head и body).
Тег <head> предназначен для хранения других элементов, цель которых — помочь браузеру в работе с данными. 
Содержимое этого тега не отображается напрямую. 
Например, чтобы сообщить браузеру кодировку HTML-страницы, необходимо внутри элемента head использовать тег <meta charset="utf-8"> 
(utf-8 самая распространённая современная кодировка, используйте везде ее). 
Кодировку HTML-страницы нужно указывать для того, чтобы веб-браузер мог правильно отображать текст на странице. 
Если браузер неправильно «угадает» кодировку, то вместо текста будут отображаться иероглифы. 
Тег <body> предназначен для хранения содержания веб-страницы (контента), отображаемого в окне браузера.

Тег title, теги для заголовков, параграфов, списков и специальные символы

Тег <title> для заголовка страницы — это тот текст, который отображается в левом верхнем углу браузера, а также во вкладках. 
Для поисковой системы он самый главный, так как именно его Яндекс, Google и др. используют в качестве заголовка сниппета. 
Тег располагается в элементе head. 
Например:
<head>
  <title>I love IT</title>
</head>

В языке HTML для выделения заголовков предусмотрено целое семейство тегов: от <h1> до <h6> (heading - заголовок). 
Здесь можно почитать о заголовках http://seo-mayak.com/seo-prodvizhenie/tonkosti-prodvizheniya/pravilnaya-struktura-zagolovkov-sajta-html-tegi-h1-h6-i-ix-vliyanie-na-prodvizhenie.html. 
Значения тега <h1> - создать заголовок-введение, предшествующий основному содержимому страницы. 
Можно использовать только один h1 на странице, и он обычно находится в шапке сайта.
Заголовки второго, третьего уровней и т.д. – подзаголовки – позволяют делить содержимое страниц на менее важные, но связанные разделы. 
Лучше использовать заголовки по порядку и стараться не пропускать их номера, например, никогда не переходите от тега <h2> к тегу <h5>. 

Тег <p> (paragraph) для абзацев текста. 
Они могут содержать текст, картинки и другие строчные элементы 
(строчные – которые не начинаются с новой строки). 
Но они не могут содержать в себе заголовки, списки или любые другие элементы, которые обычно показываются как блоки по умолчанию 
(блочные элементы – начинаются с новой строки).

В HTML существует три типа списков (ссылка http://htmlbook.ru/samhtml/spiski):
Маркированные
Нумерованные
Список определений
Каждый пункт списка обозначается тегом <li>, каждый элемент списка по умолчанию - блочный (начинается с новой строки), но это можно изменть в стилях.
Маркированный список (unodered list - от англ. неупорядоченный список) - перед каждым элементом списка добавляется небольшой маркер, обычно в виде закрашенного кружка. 
Сам список формируется с помощью контейнера <ul>, например:
<ul>
 <li>Первый пункт</li>
 <li>Второй пункт</li> 
</ul>
При помощи стилей, можно поменять внешний вид маркера (http://htmlbook.ru/content/svoystva-spiskov).
Нумерованные (ordered lists - упорядоченный список) - списки, для которых важен порядок пунктов списка (например, пошаговые инструкции).
Для создания списка используют тег <ol>.
Списки представляют собой набор элементов с их порядковыми номерами. 
По умолчанию - применяется список с арабскими числами (1, 2, 3...), но можно поменять (на буквы, например).
Чтобы начать нумерацию списка не с 1-го пункта, а с любого другого используют атрибут start.
Пример:
<ol start="17">
 <li>Первый пункт</li>
 <li>Второй пункт</li>
 <li>Третий пункт</li>
</ol>
Список определений (description - описание) - каждый пункт списка состоит из двух элементов: термина и его определения. 
Сам список задается с помощью контейнера <dl>, термин — тегом <dt> (от англ. terms), а его определение — с помощью тега <dd> (от англ. definition). 
Пример:
<dl>
  <dt>Термин 1</dt>
    <dd>Определение 1</dd>
  <dt>Термин 2</dt>
    <dd>Определение 2</dd>
</dl>

Специальные символы. Бывает нужно вывести символ, которого нет на клавиатуре. 
Или, например, символы < и > не будут отображены браузером, т.к. он подумает, что это тег. 
Для вставки спецсимволов на страницу используют ее именной или цифровой код. 
Например, чтобы отобразить тег <p> на экране компьютера пользователя мы наберем следующий код:
<p> Этот параграф о теге &lt;p&gt;</p>
&lt; и &gt; - именнованые теги для символов меньше и больше (сокращение от англ. less than и greater than)
Можно использовать цифровой код, например &#60; для знака < и &#62; для знака >.
В результате будет отображено: 
Этот параграф о теге <p>
Почитать о спецсимволах и найти код для необходимого символа можно здесь https://html5book.ru/specsimvoly-html/ 
и здесь http://htmlbook.ru/samhtml/tekst/spetssimvoly. 
Здесь вы найдете разные интересные символы и можете скопировать его цифровой код, для вставки на свою страницу &#9757;

Еще ресурсы по теме разметка текста:
HTML Academy https://htmlacademy.ru/courses/38

То, что пригодилось сегодня, но не касается изучаемых тем
Сегодня мы немного улучшили наш рабочий инструмент Notepad ++. 
Код лучше читается, когда уровень вложенности элементов показан отступами. 
Можно делать код «красивым», нажав всего пару кнопок. 
А как именно, можно прочитать в статье "Делаем код "лесенкой" (Notepad ++)" http://sampawno.ru/viewtopic.php?f=2&t=79


Практика: 

Задание 1. Создать страницу первого урока (тут будет ссылка) и разметить ее заголовки, абзацы и списки.
Решение
Будем работать в Notepad++, но вы можете в любом текстовом редакторе, например, Блокнот.
Вначале создадим папку для нашего сайта. Назовем ее tutorial. 
Потом в Notepad++ создадим новый документ. 
В пункте меню «синтаксисы» выберем HTML. 
Тогда документ сохранится в нужном формате и код будет подсвечен (теги выделены одним цветом, содержание тегов – другим).
Это делает код более читабельным. 
Выберем кодировку UTF-8 без BOM.
Первым делом, создадим простейшую HTML страницу. 
Желательно сразу же, как только вы набираете открывающий тег, закрывать его, поскольку об этом очень легко забыть.
Сохраним документ в папке tutorial с именем tutorial_1 и расширением html. 
Открываем файл с содержанием первого урока(тут будет ссылка).
Выделяем все содержимое (Ctrl+A), копируем (Ctrl+C) и вставляем его в элемент body документа (Ctrl+V). 
Выбираем меню Notepad++ «запуск», выбираем браузер и смотрим на результат. 
Пока что результат не впечатляет. 
Вначале дадим заголовок title для нашей страницы. Пусть он будет "Знакомство с HTML".
Потом читаем текст и решаем, где у нас заголовки и где начинаются и заканчиваются параграфы. 
Не забудьте поменять знаки < и > на именнованные теги (&lt; &gt;) или используйте цифровой код, чтобы браузер отобразил эти знаки.
Заголовки начнем ставит с заголовков второго уровня, т.к. заголовок первого уровня у нас будет в шапке сайта, мы его добавим намного позже.
Также у нас есть вначале документа список - перечисление тем, которые мы узнаем из урока.
Посмотреть на результат можно здесь (ссылка).
Чтобы посмотреть код страницы, вызовите контекстное меню (правая клавиша мыши) и выбирите пункт "просмотр кода страницы. 
Или можете зайти в инструменты разработчика, для этого нажмите F12.

Задание 2. Создание многоуровневого списка. Перейдите по ссылке https://htmlacademy.ru/courses/38/run/6

Задание 3. Ищем ошибки в коде. Перейдите по ссылке https://htmlacademy.ru/courses/4/run/7 
Если не работает ссылка, ищем сайт HTMLAcademy https://htmlacademy.ru/.
Нажимаем на пункты меню последовательно: HTMLAcademy/курсы/Знакомство/Ищем ошибки



